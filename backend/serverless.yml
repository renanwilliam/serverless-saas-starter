service: ${env:APP_NAME}
frameworkVersion: '3'
useDotenv: true

package:
  individually: true

plugins:
  - serverless-lift
  - serverless-esbuild
  - serverless-certificate-creator
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  logRetentionInDays: 90
  environment:
    FRONTEND_URL: ${env:FRONTEND_URL}
    APPLICATION_TABLE_NAME:
      Ref: ApplicationTable
    COGNITO_USER_POOL_ID:
      Ref: UserPool
    COGNITO_IDENTITY_POOL_ID:
      Ref: IdentityPool
    STRIPE_API_KEY: ${env:STRIPE_API_KEY}
    STRIPE_PRICE_SINGLE_PURCHASE: ${env:STRIPE_PRICE_SINGLE_PURCHASE}
    STRIPE_PRICE_SUBSCRIPTION_PURCHASE: ${env:STRIPE_PRICE_SUBSCRIPTION_PURCHASE}
    QUEUE_URL: ${construct:purchaseAsyncQueue.queueUrl}

resources:
  - ${file(resources/s3-bucket.yaml)}
  - ${file(resources/cognito.yaml)}
  - ${file(resources/dynamodb.yaml)}

#  uncomment if you plan to use VPC
#  - ${file(resources/vpc-main.yaml)}
#  - ${file(resources/vpc-routes.yaml)}
#  - ${file(resources/vpc-nat-gateway.yaml)}

constructs:
  purchaseAsyncQueue:
    type: queue
    worker:
      handler: src/handlers/purchase/processPurchaseQueue.handler
      iamRoleStatementsInherit: true
      timeout: 900
      memory: 512
      iamRoleStatements:
        - ${file(iam/applicationTableIAM.yaml):AllPermissions}
        - ${file(iam/websocketIAM.yaml):InvokePermission}

functions:
  idTokenAuthorizer:
    handler: src/handlers/user/authorizer.handler
  cognitoPreSign:
    handler: src/handlers/user/preSignUpUserPoolTrigger.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminUpdateUserAttributes
          - cognito-idp:ListUsers
          - cognito-idp:AdminLinkProviderForUser
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
        Resource:
          - !GetAtt UserPool.Arn
    events:
      - cognitoUserPool:
          pool: ${self:provider.stage}-${env:COGNITO_AUTH_NAME}-user-pool
          trigger: PreSignUp
          existing: true
          forceDeploy: true
  userStats:
    handler: src/handlers/user/stats.handler
    events:
      - http:
          method: get
          path: '/rest/v1/user/stats'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
  userWebsocketRequests:
    handler: src/handlers/user/websocket.handler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: idTokenAuthorizer
            identitySource:
              - 'route.request.querystring.Auth'
      - websocket:
          route: $disconnect
      - websocket:
          # Handles all other requests
          route: $default
  createPurchase:
    handler: src/handlers/purchase/create.handler
    events:
      - http:
          method: post
          path: '/rest/v1/purchases'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
  createPurchaseStripeWebhook:
    handler: src/handlers/purchase/createStripeWebhook.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
          - dynamodb:DescribeTable
        Resource:
          - !GetAtt ApplicationTable.Arn
          - !Join [ '', [ !GetAtt ApplicationTable.Arn, "/*" ] ]
    environment:
      STRIPE_INTEGRATION_WEBHOOK_SECRET: ${env:STRIPE_INTEGRATION_WEBHOOK_SECRET}
    events:
      - http:
          method: post
          path: '/rest/v1/purchases/webhook/stripe'
  updatePurchase:
    handler: src/handlers/purchase/update.handler
    events:
      - http:
          method: put
          path: '/rest/v1/purchases/{purchaseId}'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
  deletePurchase:
    handler: src/handlers/purchase/delete.handler
    events:
      - http:
          method: delete
          path: '/rest/v1/purchases/{purchaseId}'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
  findOnePurchase:
    handler: src/handlers/purchase/findOne.handler
    events:
      - http:
          method: get
          path: '/rest/v1/purchases/{purchaseId}'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
  findAllPurchases:
    handler: src/handlers/purchase/findAll.handler
    events:
      - http:
          method: get
          path: '/rest/v1/purchases'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn